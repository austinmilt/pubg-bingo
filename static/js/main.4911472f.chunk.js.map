{"version":3,"sources":["util/env.ts","util/gsheets.ts","Grid.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DEFAULT","_DEFAULT","PROD","overrideDefaults","_DEV","_PROD","defaults","overrides","console","log","result","isObject","Object","entries","key","value","undefined","obj","Array","isArray","env","getOptions","game","a","requestUrl","optionsUrl","replaceAll","gameColumn","axios","get","timeout","response","data","values","row","push","Grid","props","state","gameDefault","seed","buildCell","bind","buildGrid","getSeed","params","URLSearchParams","window","location","search","this","getGame","pickGame","pickSeed","history","pushState","baseUrl","setState","makeSelection","then","selection","cells","rows","columns","remainingOptions","shuffleArray","i","array","rand","random","clone","seedrandom","sort","float","randomWords","join","grid","option","onClick","e","currentTarget","classList","toggle","className","gameTitle","id","href","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"y7BAeMA,EAAqBC,EAErBC,GADiBC,EAAiBH,EAASI,GACzBD,EAAiBH,EAASK,IAGlD,SAASF,EAAiBG,EAAeC,GACrCC,QAAQC,IAAIH,EAAUC,GACtB,IAAMG,EAAc,GACpB,GAAIC,EAASL,GACT,cAAyBM,OAAOC,QAAQP,GAAxC,eAAmD,CAA9C,0BAAKQ,EAAL,KAAUC,EAAV,KACGJ,EAASI,GACTL,EAAOI,GAAOX,EAAiBY,EAAOR,EAAUO,IAGhDJ,EAAOI,GADAP,OAC0BS,IAAnBT,EAAUO,GAAqBC,EAAQR,EAAUO,GAGjDC,EAI1B,OAAOL,EAIX,SAASC,EAASM,GACd,MAAsB,kBAARA,GAA4B,OAARA,IAAiBC,MAAMC,QAAQF,GAIrE,SAASG,IAEY,OAAOlB,E,8BChCbmB,E,8EAAf,WAA0BC,GAA1B,yBAAAC,EAAA,6DACUC,EAAqBJ,IAAMK,WAAWC,WAAW,YAAaN,IAAMO,WAAWL,IADzF,SAE0CM,IAAMC,IAAIL,EAAY,CAACM,QAAS,MAF1E,OAEUC,EAFV,OAGUrB,EAAmB,GAH7B,cAIoBqB,EAASC,KAAKC,QAJlC,IAII,2BAASC,EAA6B,QAClCxB,EAAOyB,KAAKD,EAAI,IALxB,uDAOWxB,GAPX,4C,iCCGM0B,E,kDAEF,WAAYC,GAAoB,IAAD,8BAC3B,cAAMA,IACDC,MAAQ,CAAChB,KAAMF,IAAMmB,YAAaC,KAAM,IAC7C,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBALY,E,qDAS/B,WAA2B,IAAD,OAChBG,EAA0B,IAAIC,gBAAgBC,OAAOC,SAASC,QAChE3B,EAAsB4B,KAAKC,QAAQN,GACnCL,EAAsBU,KAAKN,QAAQC,GAClCvB,GAASkB,IACLlB,IAAMA,EAAO4B,KAAKE,YAClBZ,IAAMA,EAAOU,KAAKG,YACvBN,OAAOO,QAAQC,UAAU,YAAa,YAAtC,UAAsDnC,IAAMoC,QAA5D,iBAA4ElC,EAA5E,iBAAyFkB,KAE7FU,KAAKO,SAAS,CAACnC,KAAMA,EAAMkB,KAAMA,IACjCU,KAAKQ,cAAcpC,EAAMkB,GAAMmB,MAAK,SAAAC,GAAS,OAAI,EAAKH,SAAS,CAACG,UAAWA,S,kEAI/E,WAA4BtC,EAAckB,GAA1C,oFACUqB,EAAgBX,KAAKb,MAAMyB,KAAOZ,KAAKb,MAAM0B,QAC7CrD,EAAmB,GAF7B,SAG6CW,EAAWC,GAHxD,OAKI,IAFM0C,EAHV,OAIId,KAAKe,aAAaD,EAAkBxB,GAC3B0B,EAAI,EAAGA,EAAIL,EAAOK,IACvBxD,EAAOyB,KAAK6B,EAAiBE,IANrC,yBAQWxD,GARX,gD,8EAYA,SAAgBmC,GACZ,OAAOA,EAAOhB,IAAI,U,sBAItB,WACI,OAAOT,IAAMmB,c,0BAIjB,SAAqB4B,EAAc3B,GAC/B,IAAM4B,EAAeC,IAAOC,MAAMC,IAAW/B,IAC7C2B,EAAMK,MAAK,kBAAMJ,EAAKK,QAAU,Q,qBAIpC,SAAgB5B,GACZ,OAAOA,EAAOhB,IAAI,U,sBAItB,WACI,OAAO6C,IAAY,GAAGC,KAAK,O,uBAI/B,WACI,IAAMC,EAA0B,GAChC,GAAI1B,KAAKZ,MAAMsB,UAAW,CAAC,IAAD,gBACHV,KAAKZ,MAAMsB,WADR,IACtB,2BAAyC,CAAC,IAAjCiB,EAAgC,QACrCD,EAAKzC,KAAKe,KAAKT,UAAUoC,KAFP,+BAK1B,OAAOD,I,uBAIX,SAAkBC,GACd,OAAO,uBAAoBC,QAAS,SAAAC,GAAC,OAAIA,EAAEC,cAAcC,UAAUC,OAAO,aAAnE,SAAgF,qBAAKC,UAAU,OAAf,SAAsB,+BAAON,OAAjGA,K,oBAIvB,WACI,OACI,iCACI,+BACKzD,IAAMgE,UAAUlC,KAAKZ,MAAMhB,MAAM,uBAClC,qCACA,qCACA,qCACA,qCACA,wCAEJ,qBAAK6D,UAAU,OAAf,SACKjC,KAAKP,cAEV,2CAAa,sBAAM0C,GAAG,OAAT,SAAiBnC,KAAKZ,MAAME,UACzC,gCAAO,mBAAG8C,KAAI,UAAKlE,IAAMoC,SAAlB,uC,GA9FJ+B,IAAMC,WCdnBC,E,4JACF,WACI,OACI,qBAAKN,UAAU,MAAf,SACI,cAAC,EAAD,CAAMrB,KAAM,EAAGC,QAAS,U,GAJtBwB,IAAMC,WAUTC,ICAAC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4911472f.chunk.js","sourcesContent":["import _DEFAULT from '../config/default.json';\r\nimport _DEV from '../config/dev.json';\r\nimport _PROD from '../config/prod.json';\r\n\r\ntype AppProfile = 'default' | 'dev' | 'prod';\r\n\r\ninterface AppConfig {\r\n    profile: AppProfile;\r\n    baseUrl: string;\r\n    optionsUrl: string;\r\n    gameColumn: {[game: string]: string};\r\n    gameTitle: {[game: string]: string};\r\n    gameDefault: string;\r\n}\r\n\r\nconst DEFAULT: AppConfig = _DEFAULT as AppConfig;\r\nconst DEV: AppConfig = overrideDefaults(DEFAULT, _DEV);\r\nconst PROD: AppConfig = overrideDefaults(DEFAULT, _PROD);\r\n\r\n\r\nfunction overrideDefaults(defaults: any, overrides: any): any {\r\n    console.log(defaults, overrides);\r\n    const result: any = {};\r\n    if (isObject(defaults)) {\r\n        for (let [key, value] of Object.entries(defaults)) {\r\n            if (isObject(value)) {\r\n                result[key] = overrideDefaults(value, overrides[key]);\r\n\r\n            } else if (overrides) {\r\n                result[key] = overrides[key] === undefined ? value : overrides[key];\r\n                \r\n            } else {\r\n                result[key] = value;\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\nfunction isObject(obj: any): boolean {\r\n    return typeof obj === 'object' && obj !== null && !Array.isArray(obj);\r\n}\r\n\r\n\r\nfunction env(): AppConfig {\r\n    switch (process.env.REACT_APP_ENV) {\r\n        case 'prod': return PROD;\r\n        default: return DEV;\r\n    }\r\n}\r\n\r\n\r\nexport { env };\r\nexport type {AppConfig, AppProfile};","import axios from \"axios\";\r\nimport { env } from \"./env\";\r\n\r\ninterface SheetsResponse {\r\n    range: string;\r\n    majorDimension: string,\r\n    values: string[][];\r\n}\r\n\r\ninterface AxiosResponse {\r\n    readonly status: number;\r\n    readonly data: SheetsResponse;\r\n}\r\n\r\n//https://stackoverflow.com/questions/38949318/google-sheets-api-returns-the-caller-does-not-have-permission-when-using-serve\r\nasync function getOptions(game: string): Promise<string[]> {\r\n    const requestUrl: string = env().optionsUrl.replaceAll(\"${COLUMN}\", env().gameColumn[game]);\r\n    const response: AxiosResponse = await axios.get(requestUrl, {timeout: 5000});\r\n    const result: string[] = [];\r\n    for (let row of response.data.values) {\r\n        result.push(row[0]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport {getOptions};","import random, { Random } from \"random\";\r\nimport React from \"react\";\r\nimport seedrandom from 'seedrandom';\r\nimport randomWords from 'random-words';\r\nimport { env } from \"./util/env\";\r\nimport { getOptions } from \"./util/gsheets\";\r\n\r\ninterface Properties {\r\n    rows: number;\r\n    columns: number;\r\n}\r\n\r\ninterface State {\r\n    game: string;\r\n    seed: string;\r\n    selection?: string[];\r\n}\r\n\r\nclass Grid extends React.Component<Properties, State> {\r\n\r\n    constructor(props: Properties) {\r\n        super(props);\r\n        this.state = {game: env().gameDefault, seed: ''};\r\n        this.buildCell = this.buildCell.bind(this);\r\n        this.buildGrid = this.buildGrid.bind(this);\r\n        this.getSeed = this.getSeed.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount(): void {\r\n        const params: URLSearchParams = new URLSearchParams(window.location.search);\r\n        let game: string | null = this.getGame(params);\r\n        let seed: string | null = this.getSeed(params);\r\n        if (!game || !seed) {\r\n            if (!game) game = this.pickGame();\r\n            if (!seed) seed = this.pickSeed();\r\n            window.history.pushState('generated', 'generated', `${env().baseUrl}?game=${game}&seed=${seed}`);\r\n        }\r\n        this.setState({game: game, seed: seed});\r\n        this.makeSelection(game, seed).then(selection => this.setState({selection: selection}));\r\n    }\r\n\r\n\r\n    private async makeSelection(game: string, seed: string): Promise<string[]> {\r\n        const cells: number = this.props.rows * this.props.columns;\r\n        const result: string[] = [];\r\n        const remainingOptions: string[] = await getOptions(game);\r\n        this.shuffleArray(remainingOptions, seed);\r\n        for (let i = 0; i < cells; i++) {\r\n            result.push(remainingOptions[i]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    private getGame(params: URLSearchParams): string | null {\r\n        return params.get(\"game\");\r\n    }\r\n\r\n\r\n    private pickGame(): string {\r\n        return env().gameDefault;\r\n    }\r\n\r\n\r\n    private shuffleArray(array: any[], seed: string): void {\r\n        const rand: Random = random.clone(seedrandom(seed));\r\n        array.sort(() => rand.float() - 0.5);\r\n    }\r\n\r\n    \r\n    private getSeed(params: URLSearchParams): string | null {\r\n        return params.get(\"seed\");\r\n    }\r\n\r\n\r\n    private pickSeed(): string {\r\n        return randomWords(3).join('-');\r\n    }\r\n\r\n\r\n    private buildGrid(): React.ReactNode[] {\r\n        const grid: React.ReactNode[] = [];\r\n        if (this.state.selection) {\r\n            for (let option of this.state.selection) {\r\n                grid.push(this.buildCell(option));\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n\r\n\r\n    private buildCell(option: string): React.ReactNode {\r\n        return <label key={option} onClick={e => e.currentTarget.classList.toggle(\"complete\")}><div className=\"mark\"><span>{option}</span></div></label>\r\n    }\r\n\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n            <main>\r\n                <h1>\r\n                    {env().gameTitle[this.state.game]}<br/>\r\n                    <span>B</span>\r\n                    <span>I</span>\r\n                    <span>N</span>\r\n                    <span>G</span>\r\n                    <span>O</span>\r\n                </h1>\r\n                <div className=\"grid\">\r\n                    {this.buildGrid()}\r\n                </div>\r\n                <small>Seed: <span id=\"seed\">{this.state.seed}</span></small>\r\n                <small><a href={`${env().baseUrl}`}>Gimme a new Card</a></small>\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport {Grid};\r\n","import React from 'react';\nimport './App.css';\nimport { Grid } from './Grid';\n\nclass App extends React.Component {\n    render(): React.ReactNode {\n        return (\n            <div className=\"App\">\n                <Grid rows={5} columns={5}/>\n            </div>\n          );\n    }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}