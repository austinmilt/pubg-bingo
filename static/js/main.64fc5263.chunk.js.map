{"version":3,"sources":["options.ts","Grid.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["options","Grid","props","state","selection","makeSelection","buildCell","bind","buildGrid","cells","this","rows","columns","result","remainingOptions","shuffleArray","i","push","array","rand","random","clone","seedrandom","seed","sort","float","grid","option","onClick","e","currentTarget","classList","toggle","className","id","React","Component","App","pathSplit","window","location","pathname","split","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAAMA,EAAoB,CACtB,6CACA,mBACA,qCACA,qCACA,wCACA,6BACA,oBACA,iCACA,0CACA,cACA,6BACA,cACA,qCACA,mBACA,oBACA,aACA,6BACA,wBACA,sBACA,kBACA,sBACA,4BACA,qBACA,oBACA,2BACA,oBACA,mBACA,uBACA,kB,wBCdEC,E,kDAEF,WAAYC,GAAoB,IAAD,8BAC3B,cAAMA,IACDC,MAAQ,CAACC,UAAW,EAAKC,iBAC9B,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBAJU,E,iDAQ/B,WACI,IAAME,EAAgBC,KAAKR,MAAMS,KAAOD,KAAKR,MAAMU,QAC7CC,EAAmB,GACnBC,EAA6Bd,EACnCU,KAAKK,aAAaD,GAClB,IAAK,IAAIE,EAAI,EAAGA,EAAIP,EAAOO,IACvBH,EAAOI,KAAKH,EAAiBE,IAEjC,OAAOH,I,0BAIX,SAAqBK,GACjB,IAAMC,EAAeC,IAAOC,MAAMC,IAAWZ,KAAKR,MAAMqB,OACxDL,EAAMM,MAAK,kBAAML,EAAKM,QAAU,Q,uBAIpC,WACI,IADmC,EAC7BC,EAA0B,GADG,cAEhBhB,KAAKP,MAAMC,WAFK,IAEnC,2BAAyC,CAAC,IAAjCuB,EAAgC,QACrCD,EAAKT,KAAKP,KAAKJ,UAAUqB,KAHM,8BAKnC,OAAOD,I,uBAIX,SAAkBC,GACd,OAAO,uBAAoBC,QAAS,SAAAC,GAAC,OAAIA,EAAEC,cAAcC,UAAUC,OAAO,aAAnE,SAAgF,qBAAKC,UAAU,OAAf,SAAsB,+BAAON,OAAjGA,K,oBAIvB,WACI,OACI,iCACI,sCACQ,uBACJ,qCACA,qCACA,qCACA,qCACA,wCAEJ,qBAAKM,UAAU,OAAf,SACKvB,KAAKF,cAEV,2CAAa,sBAAM0B,GAAG,OAAT,SAAiBxB,KAAKR,MAAMqB,iB,GAxDtCY,IAAMC,WCXnBC,E,4JACF,WACI,IAAMC,EAAsBC,OAAOC,SAASC,SAASC,MAAM,KACrDnB,EAAee,EAAUA,EAAUK,OAAO,GAEhD,OACI,qBAAKV,UAAU,MAAf,SACI,cAAC,EAAD,CAAMtB,KAAM,EAAGC,QAAS,EAAGW,KAAMA,U,GAP/BY,IAAMC,WAaTC,ICHAO,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.64fc5263.chunk.js","sourcesContent":["const options: string[] = [\r\n    \"Touch PP while finishing a knocked player.\",\r\n    \"Death by grenade\",\r\n    \"Destroy all the tires on a vehicle\",\r\n    \"Destroy all the windows on a house\",\r\n    \"Destroy all the fences around a house\",\r\n    \"Survive an entire red zone\",\r\n    \"Make it to top 10\",\r\n    \"Jump from a glider and survive\",\r\n    \"Land glider in an inaccessible location\",\r\n    \"Deny a kill\",\r\n    \"Steal a kill from an enemy\",\r\n    \"Drink Pepsi\",\r\n    \"Spend all of round 3+ in blue zone\",\r\n    \"Knock by vehicle\",\r\n    \"Go round 5+ naked\" ,\r\n    \"Get a brdm\",\r\n    \"Knock / kill while jumping\",\r\n    \"Smoke Marlboro lights\",\r\n    \"Have sex with Arrby\",\r\n    \"Win the lottery\",\r\n    \"Dont be a pedophile\",\r\n    \"Ask Shakira out on a date\",\r\n    \"Forage wild grapes\",\r\n    \"Eat a whole lemon\",\r\n    \"Drive a beat up Chrysler\",\r\n    \"Live and let live\",\r\n    \"Live and let die\",\r\n    \"Remember the Al Homo\",\r\n    \"Time your poop\"\r\n];\r\n\r\nexport {options}","import random, { Random } from \"random\";\r\nimport React from \"react\";\r\nimport { options } from \"./options\";\r\nimport seedrandom from 'seedrandom';\r\n\r\ninterface Properties {\r\n    rows: number;\r\n    columns: number;\r\n    seed: string;\r\n}\r\n\r\ninterface State {\r\n    selection: string[];\r\n}\r\n\r\nclass Grid extends React.Component<Properties, State> {\r\n\r\n    constructor(props: Properties) {\r\n        super(props);\r\n        this.state = {selection: this.makeSelection()};\r\n        this.buildCell = this.buildCell.bind(this);\r\n        this.buildGrid = this.buildGrid.bind(this);\r\n    }\r\n\r\n\r\n    private makeSelection(): string[] {\r\n        const cells: number = this.props.rows * this.props.columns;\r\n        const result: string[] = [];\r\n        const remainingOptions: string[] = options;\r\n        this.shuffleArray(remainingOptions);\r\n        for (let i = 0; i < cells; i++) {\r\n            result.push(remainingOptions[i]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    private shuffleArray(array: any[]): void {\r\n        const rand: Random = random.clone(seedrandom(this.props.seed));\r\n        array.sort(() => rand.float() - 0.5);\r\n    }\r\n\r\n\r\n    private buildGrid(): React.ReactNode[] {\r\n        const grid: React.ReactNode[] = [];\r\n        for (let option of this.state.selection) {\r\n            grid.push(this.buildCell(option));\r\n        }\r\n        return grid;\r\n    }\r\n\r\n\r\n    private buildCell(option: string): React.ReactNode {\r\n        return <label key={option} onClick={e => e.currentTarget.classList.toggle(\"complete\")}><div className=\"mark\"><span>{option}</span></div></label>\r\n    }\r\n\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n            <main>\r\n                <h1>\r\n                    PUBG<br/>\r\n                    <span>B</span>\r\n                    <span>I</span>\r\n                    <span>N</span>\r\n                    <span>G</span>\r\n                    <span>O</span>\r\n                </h1>\r\n                <div className=\"grid\">\r\n                    {this.buildGrid()}\r\n                </div>\r\n                <small>Seed: <span id=\"seed\">{this.props.seed}</span></small>\r\n                </main>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport {Grid};\r\n","import React from 'react';\nimport './App.css';\nimport { Grid } from './Grid';\n\nclass App extends React.Component {\n    render(): React.ReactNode {\n        const pathSplit: string[] = window.location.pathname.split('/');\n        const seed: string = pathSplit[pathSplit.length-1];\n\n        return (\n            <div className=\"App\">\n                <Grid rows={5} columns={5} seed={seed}/>\n            </div>\n          );\n    }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}