{"version":3,"sources":["util/env.ts","util/gsheets.ts","Grid.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DEFAULT","_DEFAULT","PROD","overrideDefaults","_DEV","_PROD","defaults","overrides","result","isObject","Object","entries","key","value","undefined","obj","Array","isArray","env","getOptions","a","axios","get","optionsUrl","timeout","response","data","values","row","push","Grid","props","state","buildCell","bind","buildGrid","getSeed","this","makeSelection","then","selection","setState","seed","URLSearchParams","window","location","search","randomWords","join","history","pushState","baseUrl","cells","rows","columns","remainingOptions","shuffleArray","i","array","rand","random","clone","seedrandom","sort","float","grid","option","onClick","e","currentTarget","classList","toggle","className","id","href","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6f14723.chunk.js","sourcesContent":["import _DEFAULT from '../config/default.json';\r\nimport _DEV from '../config/dev.json';\r\nimport _PROD from '../config/prod.json';\r\n\r\ntype AppProfile = 'default' | 'dev' | 'prod';\r\n\r\ninterface AppConfig {\r\n    profile: AppProfile;\r\n    baseUrl: string;\r\n    optionsUrl: string;\r\n}\r\n\r\nconst DEFAULT: AppConfig = _DEFAULT as AppConfig;\r\nconst DEV: AppConfig = overrideDefaults(DEFAULT, _DEV);\r\nconst PROD: AppConfig = overrideDefaults(DEFAULT, _PROD);\r\n\r\n\r\nfunction overrideDefaults(defaults: any, overrides: any): any {\r\n    const result: any = {};\r\n    if (isObject(defaults)) {\r\n        for (let [key, value] of Object.entries(defaults)) {\r\n            if (isObject(value)) {\r\n                result[key] = overrideDefaults(value, overrides[key]);\r\n\r\n            } else {\r\n                result[key] = overrides[key] === undefined ? value : overrides[key];\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\nfunction isObject(obj: any): boolean {\r\n    return typeof obj === 'object' && obj !== null && !Array.isArray(obj);\r\n}\r\n\r\n\r\nfunction env(): AppConfig {\r\n    switch (process.env.REACT_APP_ENV) {\r\n        case 'prod': return PROD;\r\n        default: return DEV;\r\n    }\r\n}\r\n\r\n\r\nexport { env };\r\nexport type {AppConfig, AppProfile};","import axios from \"axios\";\r\nimport { env } from \"./env\";\r\n\r\ninterface SheetsResponse {\r\n    range: string;\r\n    majorDimension: string,\r\n    values: string[][];\r\n}\r\n\r\ninterface AxiosResponse {\r\n    readonly status: number;\r\n    readonly data: SheetsResponse;\r\n}\r\n\r\n//https://stackoverflow.com/questions/38949318/google-sheets-api-returns-the-caller-does-not-have-permission-when-using-serve\r\nasync function getOptions(): Promise<string[]> {\r\n    const response: AxiosResponse = await axios.get(env().optionsUrl, {timeout: 5000});\r\n    const result: string[] = [];\r\n    for (let row of response.data.values) {\r\n        result.push(row[0]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport {getOptions};","import random, { Random } from \"random\";\r\nimport React from \"react\";\r\nimport seedrandom from 'seedrandom';\r\nimport randomWords from 'random-words';\r\nimport { env } from \"./util/env\";\r\nimport { getOptions } from \"./util/gsheets\";\r\n\r\ninterface Properties {\r\n    rows: number;\r\n    columns: number;\r\n}\r\n\r\ninterface State {\r\n    selection?: string[];\r\n}\r\n\r\nclass Grid extends React.Component<Properties, State> {\r\n\r\n    constructor(props: Properties) {\r\n        super(props);\r\n        this.state = {};\r\n        this.buildCell = this.buildCell.bind(this);\r\n        this.buildGrid = this.buildGrid.bind(this);\r\n        this.getSeed = this.getSeed.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount(): void {\r\n        this.makeSelection().then(selection => this.setState({selection: selection}));\r\n    }\r\n\r\n\r\n    private getSeed(): string {\r\n        let seed: string | null = new URLSearchParams(window.location.search).get(\"seed\");\r\n        if (seed === null) {\r\n            seed = randomWords(3).join('-');\r\n            window.history.pushState('seeded', 'seeded', `${env().baseUrl}?seed=${seed}`);\r\n        }\r\n        return seed;\r\n    }\r\n\r\n\r\n    private async makeSelection(): Promise<string[]> {\r\n        const cells: number = this.props.rows * this.props.columns;\r\n        const result: string[] = [];\r\n        const remainingOptions: string[] = await getOptions();\r\n        this.shuffleArray(remainingOptions);\r\n        for (let i = 0; i < cells; i++) {\r\n            result.push(remainingOptions[i]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    private shuffleArray(array: any[]): void {\r\n        const seed: string = this.getSeed();\r\n        const rand: Random = random.clone(seedrandom(seed));\r\n        array.sort(() => rand.float() - 0.5);\r\n    }\r\n\r\n\r\n    private buildGrid(): React.ReactNode[] {\r\n        const grid: React.ReactNode[] = [];\r\n        if (this.state.selection) {\r\n            for (let option of this.state.selection) {\r\n                grid.push(this.buildCell(option));\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n\r\n\r\n    private buildCell(option: string): React.ReactNode {\r\n        return <label key={option} onClick={e => e.currentTarget.classList.toggle(\"complete\")}><div className=\"mark\"><span>{option}</span></div></label>\r\n    }\r\n\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n            <main>\r\n                <h1>\r\n                    PUBG<br/>\r\n                    <span>B</span>\r\n                    <span>I</span>\r\n                    <span>N</span>\r\n                    <span>G</span>\r\n                    <span>O</span>\r\n                </h1>\r\n                <div className=\"grid\">\r\n                    {this.buildGrid()}\r\n                </div>\r\n                <small>Seed: <span id=\"seed\">{this.getSeed()}</span></small>\r\n                <small><a href={`${env().baseUrl}`}>Gimme a new Card</a></small>\r\n                </main>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport {Grid};\r\n","import React from 'react';\nimport './App.css';\nimport { Grid } from './Grid';\n\nclass App extends React.Component {\n    render(): React.ReactNode {\n        return (\n            <div className=\"App\">\n                <Grid rows={5} columns={5}/>\n            </div>\n          );\n    }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}